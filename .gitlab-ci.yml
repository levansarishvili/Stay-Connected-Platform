stages:
  - build-production
  - build-staging
  #- test
  - staging
  - release
  - deploy

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG  #Ase mushaobs
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest


build-staging:
  stage: build-staging
  image: docker:latest
  before_script:
    #- echo "$CI_REGISTRY_PASS" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - echo "Creating .env file"
    - echo -e "DATA_API_URL=$STAGING_API_URL\nFRONTEND_URL=$STAGING_FRONTEND_URL" > .env
    - echo "Staging variables added to .env"
    - echo "Building Docker image for Next.js app..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    - docker image prune -a --force
  only:
    - staging

build-production:
  stage: build-production
  image: docker:latest
  before_script:
    #- echo $CONTAINER_RELEASE_IMAGE
  script:
    - echo "Creating .env file"
    - echo -e "DATA_API_URL=$PRODUCTION_API_URL\nFRONTEND_URL=$PRODUCTION_FRONTEND_URL" > .env
    - echo "Production variables added to .env"
    - echo "Building Docker image for Next.js app..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE
    - docker image prune -a --force
  only:
    - main


# Run tests inside the Docker container
# test:
#   stage: test
#   image: $CONTAINER_TEST_IMAGE
#   script:
#     - echo "Running tests for Next.js app inside built container on the runner machine..."
#     - docker run --rm "$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME" npm run lint  # Run the lint tests inside the container
#   only:
#     - staging
#     - main

# Deploy to the staging server
stage:
  stage: staging
  script:
    - echo $CI_ENVIRONMENT_NAME
    - echo "Deploying to staging server..."
    - eval `ssh-agent -s`
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - ssh $APP_USER@$APP_HOST_STAGING "hostname && docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && docker pull $CONTAINER_TEST_IMAGE && docker stop nextjs-app || true && docker rm nextjs-app || true && docker run -d --name nextjs-app -p 80:3000 $CONTAINER_TEST_IMAGE npm start &&docker image prune -a --force &&exit " 
  only:
    - staging
  environment: staging
  

#Release
release-image:
  stage: release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
 

# Deploy to production server
deploy:
  stage: deploy
  script:
    - echo $CI_ENVIRONMENT_NAME
    - echo "Deploying to production server..."
    - ssh -o StrictHostKeyChecking=no $APP_USER@$APP_HOST_PROD << 'EOF
        docker pull $CONTAINER_RELEASE_IMAGE
        docker stop nextjs-app || true
        docker rm nextjs-app || true
        docker run -d --name nextjs-app -p 80:80 $CONTAINER_RELEASE_IMAGE
        docker image prune -a --force
      EOF'
  only:
    - main
  environment: production
